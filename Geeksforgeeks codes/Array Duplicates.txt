Array Duplicates

Given an array arr of size n which contains elements in range from 0 to n-1, you need to find all the elements occurring more than once in the given array. Return the answer in ascending order. If no such element is found, return list containing [-1]. 

Examples:

Input: n = 4, arr[] = [0,3,1,2]
Output: -1
Explanation: There is no repeating element in the array. Therefore output is -1.
Input: n = 5, arr[] = [2,3,1,2,3]
Output: 2 3 
Explanation: 2 and 3 occur more than once in the given array.

Solution: 

//{ Driver Code Starts
import java.io.*;
import java.util.*;

class IntArray {
    public static int[] input(BufferedReader br, int n) throws IOException {
        String[] s = br.readLine().trim().split(" ");
        int[] a = new int[n];
        for (int i = 0; i < n; i++) a[i] = Integer.parseInt(s[i]);

        return a;
    }

    public static void print(int[] a) {
        for (int e : a) System.out.print(e + " ");
        System.out.println();
    }

    public static void print(ArrayList<Integer> a) {
        for (int e : a) System.out.print(e + " ");
        System.out.println();
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while (t-- > 0) {

            int n;
            n = Integer.parseInt(br.readLine());

            int[] arr = IntArray.input(br, n);

            Solution obj = new Solution();
            ArrayList<Integer> res = obj.duplicates(arr);

            IntArray.print(res);
        }
    }
}

// } Driver Code Ends



class Solution {
    public static ArrayList<Integer> duplicates(int[] arr) {
            
            int index = 0;
            int n = arr.length;
            
            
            for (int i = 0; i<n; i++){
                index = arr[i] % n;
                arr[index] += n;
            }
            
            ArrayList<Integer> duplicates = new ArrayList<Integer>();
            
            for (int i = 0; i<n; i++){
                
                if (arr[i]/n > 1){
                    duplicates.add(i);
                }
            }
            
            if (duplicates.isEmpty()) {
                ArrayList<Integer> result = new ArrayList<>();
                result.add(-1);
                return result;
            }
            else{
                return duplicates;
            }
            
    }
}

Pseudocode
// function findDuplicates(arr, n):
//     # Mark occurrences
//     for i from 0 to n-1:
//         index = arr[i] % n
//         arr[index] += n

//     # Find duplicates
//     duplicates = []
//     for i from 0 to n-1:
//         if arr[i] / n > 1:
//             duplicates.append(i)

//     return duplicates